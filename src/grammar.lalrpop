use crate::{Expr, Type};
use std::{str::FromStr, sync::Arc};

#[LALR]
grammar;

Name: String = <s:r"[a-zA-Z+*/-][a-zA-Z0-9+*/-]*"> => s.to_string();
Num: u32 = <s:r"[0-9]+"> => u32::from_str(s).unwrap();

pub Expr: Expr = {
    "\\" <n:Name> ":" <t:Type> "." <e:Expr> => Expr::Lam(n, Arc::new(t), Box::new(e)),
    "Î»" <n:Name> ":" <t:Type> "." <e:Expr> => Expr::Lam(n, Arc::new(t), Box::new(e)),
	<e:Expr2> => e,
};

Expr2: Expr = {
	<l:Expr2> <r:Expr3> => Expr::App(Box::new(l), Box::new(r)),
	<e:Expr3> => e,
};

Expr3: Expr = {
	<n:Name> => Expr::Var(n),
	<n:Num> => Expr::Lit(n),
	"(" <e:Expr> ")" => e,
};

pub Type: Type = {
	<l:Type2> "->" <r:Type> => Type::Arr(Arc::new(l), Arc::new(r)),
	<t:Type2> => t,
};

Type2: Type = {
	"int" => Type::Int,
	"(" <t:Type> ")" => t,
};
